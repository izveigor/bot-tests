import asyncio
import os
import shutil
from traceback import print_exception
from typing import Any, Union
from xml.dom import NoModificationAllowedErr

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

from src.builder import BuilderTest
from src.constants import PATH_OF_DATA, REGEX_COMMAND, REGEX_LIST
from src.errors import BotException, BotFilesException, BotParseException
from src.graph import STATES
from src.log import logger
from src.test import Test
from src.tree import CommandsTestTree, Node
from src.user import User


async def handle(state: str, update: Update, context: CallbackContext) -> None:
    int_state = int(state)
    await STATES[int_state].handle(update.effective_user.id, update.message.text)
    await STATES[int(User.get(update.effective_user.id, "state"))].send(
        update.effective_user.id
    )


async def create(update: Update, context: CallbackContext) -> None:
    path = os.path.join(PATH_OF_DATA, str(update.effective_user.id))
    if os.path.exists(path):
        BuilderTest().get_directory_number(os.listdir(path), [])
    try:
        state = User.get(update.effective_user.id, "state")
    except ValueError:
        User.set(update.effective_user.id, state="0")
        await context.bot.send_message(
            update.effective_user.id,
            text="–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Å–Ω–∏–∑—É. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–∑–∞—Ö–æ—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç, —Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop.",
        )
        await STATES[0].send(update.effective_user.id)
    else:
        await context.bot.send_message(
            update.effective_user.id,
            text="–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
        )
        await STATES[int(state)].send(update.effective_user.id)


def allow(function: Any) -> Any:
    async def wrapper(update: Update, context: CallbackContext) -> Any:
        try:
            state = User.get(update.effective_user.id, "state")
        except ValueError:
            return await function(update, context)
        else:
            return await handle(state, update, context)

    return wrapper


@allow
async def start(update: Update, context: CallbackContext) -> None:
    await context.bot.send_message(
        update.effective_user.id,
        text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {update.effective_user.first_name} {update.effective_user.last_name}. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—à–∏ /help.",
    )


@allow
async def help(update: Update, context: CallbackContext) -> None:
    await context.bot.send_message(
        update.effective_user.id,
        '*–û–ø–∏—Å–∞–Ω–∏–µ*:\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ json-—Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create.\n\n –í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ üëá:\n/about - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n/create - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n/delete \\[command] - —É–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç. \n/help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n/list \\[start-end] - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ç start –¥–æ end –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ª–∏–º–∏—Ç - 50 —Ç–µ—Å—Ç–æ–≤).\n/my\\_tests - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–≤–µ—Ç—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help.\n/start\\_test - –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/test\\_{characters}")\n/stop - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "/start\\_test").\n/test\\_{characters} - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ "/test\\_" –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –∏ —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–∞ "\\_".\n\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤!',
        parse_mode="Markdown",
    )


@allow
async def about(update: Update, context: CallbackContext) -> None:
    await context.bot.send_message(
        update.effective_user.id,
        "–û –±–æ—Ç–µ:\nGithub: https://github.com/izveigor/bot-tests\n–ê–≤—Ç–æ—Ä: Igor Izvekov\nEmail: izveigor@gmail.com\nLicense: MIT",
    )


@allow
async def my_tests(update: Update, context: CallbackContext) -> None:
    tests = User.get_tests(update.effective_user.id)
    if not tests or len(tests) == 0:
        await context.bot.send_message(
            update.effective_user.id, "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."
        )
    else:
        await context.bot.send_message(
            update.effective_user.id,
            f"–í–∞—à–∏ —Ç–µ—Å—Ç—ã ({len(tests)}/30):\n"
            + "\n".join(
                [str(number + 1) + " " + tests[number] for number in range(len(tests))]
            ),
        )


@allow
async def delete(update: Update, context: CallbackContext) -> None:
    _, test = update.message.text.split()
    if not REGEX_COMMAND.match(test):
        await context.bot.send_message(
            update.effective_user.id,
            '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω. –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ /delete –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª –∏ —Å–ª–æ–≤–æ, —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏: –≤ –Ω–∞—á–∞–ª–µ –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å —Å–ª–æ–≤–æ "test_". –î–∞–ª–µ–µ –∫ –Ω–µ–º—É –ø—Ä–∏–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (–ø—Ä–æ–ø–∏—Å–Ω—ã–µ –∏/–∏–ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ) –∏/–∏–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏/–∏–ª–∏ _. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 40.',
        )
    else:
        if test in User.get_tests(update.effective_user.id):
            number = None
            for hset in User.get_tests_with_numbers(update.effective_user.id):
                if list(hset.values())[0] == test:
                    number = list(hset.keys())[0]
                    break
            found = CommandsTestTree().search(Node(Test(test, "", None, [], None)))
            if found:
                CommandsTestTree().delete(found)

            User.delete_test(update.effective_user.id, test)
            shutil.rmtree(
                os.path.join(PATH_OF_DATA, str(update.effective_user.id), str(number))
            )
            await context.bot.send_message(
                update.effective_user.id,
                f'–¢–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π "{test}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.',
            )
        else:
            await context.bot.send_message(
                update.effective_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–æ–º —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞."
            )


@allow
async def test(update: Update, context: CallbackContext) -> None:
    try:
        active_test = User.get(update.effective_user.id, "active_test")
    except ValueError:
        active_test = None

    if active_test is not None:
        await context.bot.send_message(
            update.effective_user.id,
            f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç "{active_test}".',
        )
    else:
        if not REGEX_COMMAND.match(update.message.text):
            await context.bot.send_message(
                update.effective_user.id,
                '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω. –í –Ω–∞—á–∞–ª–µ –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å —Å–ª–æ–≤–æ "test_". –î–∞–ª–µ–µ –∫ –Ω–µ–º—É –ø—Ä–∏–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (–ø—Ä–æ–ø–∏—Å–Ω—ã–µ –∏/–∏–ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ) –∏/–∏–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏/–∏–ª–∏ _. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 40.',
            )
        else:
            test = CommandsTestTree().search(
                Node(Test(update.message.text, "", None, [], None))
            )
            if test is None:
                await context.bot.send_message(
                    update.effective_user.id,
                    f"–¢–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π {update.message.text} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /list [range].",
                )
            else:
                await test.key.see(update.effective_user.id)


@allow
async def start_test(update: Update, context: CallbackContext) -> None:
    try:
        test_command = User.get(update.effective_user.id, "checked")
    except ValueError:
        test_command = None

    if test_command is None:
        await context.bot.send_message(
            update.effective_user.id,
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.",
        )
    else:
        test = CommandsTestTree().search(Node(Test(test_command, "", None, [], None)))
        if test:
            await test.key.start(update.effective_user.id)


@allow
async def stop(update: Update, context: CallbackContext) -> None:
    try:
        test_command = User.get(update.effective_user.id, "active_test")
    except ValueError:
        test_command = None

    if test_command is None:
        await context.bot.send_message(
            update.effective_user.id,
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.",
        )
    else:
        test = CommandsTestTree().search(Node(Test(test_command, "", None, [], None)))
        if test:
            await test.key.stop(update.effective_user.id)


@allow
async def list_(update: Update, context: CallbackContext) -> None:
    if not REGEX_LIST.match(update.message.text):
        await context.bot.send_message(
            update.effective_user.id,
            '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω. –ü–æ—Å–ª–µ —Å–ª–æ–≤–∞ "/list" –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –ø—Ä–æ–±–µ–ª, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ü–∏—Ñ—Ä–∞, –∑–Ω–∞–∫ "-" –∏ –µ—â–µ –æ–¥–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ü–∏—Ñ—Ä–∞.',
        )
    else:
        _, range_ = update.message.text.split()
        start, end = list(map(int, range_.split("-")))
        if start > end:
            await context.bot.send_message(
                update.effective_user.id,
                "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–µ—Å—è—Ç–∏—á–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–π –∫–æ–Ω–µ—á–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ü–∏—Ñ—Ä—ã.",
            )
        elif end - start + 1 > 50:
            await context.bot.send_message(
                update.effective_user.id,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50.",
            )
        else:
            list_tests = "\n".join(
                [test for test in CommandsTestTree().sort()[start : end + 1]]
            )
            await context.bot.send_message(
                update.effective_user.id,
                list_tests if list_tests else "–¢–µ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            )


@allow
async def other_message(update: Update, context: CallbackContext) -> None:
    try:
        active_test = User.get(update.effective_user.id, "active_test")
    except ValueError:
        active_test = None

    if active_test is None:
        await context.bot.send_message(
            update.effective_user.id,
            "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –Ω–∞–±–µ—Ä–∏ /help.",
        )
    else:
        test = CommandsTestTree().search(Node(Test(active_test, "", None, [], None)))
        if test:
            await test.key.check(update.effective_user.id, update.message.text)


async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    markup = query["message"]["reply_markup"]
    if query.data == "1":
        if "‚úÖ" not in markup.inline_keyboard[0][0].text:
            markup.inline_keyboard[0][0].text += "‚úÖ"
        else:
            markup.inline_keyboard[0][0].text = markup.inline_keyboard[0][0].text[:-1]
        await query.edit_message_reply_markup(
            reply_markup=markup,
        )
    elif query.data == "2":
        if "‚úÖ" not in markup.inline_keyboard[0][1].text:
            markup.inline_keyboard[0][1].text += "‚úÖ"
        else:
            markup.inline_keyboard[0][1].text = markup.inline_keyboard[0][1].text[:-1]
        await query.edit_message_reply_markup(
            reply_markup=markup,
        )
    elif query.data == "3":
        if "‚úÖ" not in markup.inline_keyboard[1][0].text:
            markup.inline_keyboard[1][0].text += "‚úÖ"
        else:
            markup.inline_keyboard[1][0].text = markup.inline_keyboard[1][0].text[:-1]
        await query.edit_message_reply_markup(
            reply_markup=markup,
        )
    elif query.data == "4":
        if "‚úÖ" not in markup.inline_keyboard[1][1].text:
            markup.inline_keyboard[1][1].text += "‚úÖ"
        else:
            markup.inline_keyboard[1][1].text = markup.inline_keyboard[1][1].text[:-1]
        await query.edit_message_reply_markup(
            reply_markup=markup,
        )
    elif query.data == "–û—Ç–≤–µ—Ç–∏—Ç—å":
        active_test = User.get(query["from"]["id"], "active_test")

        answer = []
        for i in range(len(markup.inline_keyboard)):
            for j in range(len(markup.inline_keyboard[i])):
                if "‚úÖ" in markup.inline_keyboard[i][j].text:
                    answer.append(i * 2 + j + 1)

        test = CommandsTestTree().search(Node(Test(active_test, "", None, [], None)))
        if test:
            await test.key.check(query["from"]["id"], answer)


async def get_document_messages(update: Update, context: CallbackContext) -> None:
    file_name = update.message.document.file_name
    if update.message.caption == "/create" and ".zip" in file_name:
        errors: list[Union[str, int]] = []
        try:
            await asyncio.gather(
                BuilderTest().create_test_by_json(update.message, file_name, errors)
            )
        except BotParseException:
            shutil.rmtree(
                os.path.join(
                    PATH_OF_DATA, str(update.message.from_user.id), str(errors[0])
                )
            )
            await context.bot.send_message(
                update.message.from_user.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ: " + f'"{errors[1]}".',
            )
        except BotFilesException:
            if isinstance(errors[0], int):
                shutil.rmtree(
                    os.path.join(
                        PATH_OF_DATA, str(update.message.from_user.id), str(errors[0])
                    )
                )
                error_message = errors[1]
            else:
                error_message = errors[0]

            await context.bot.send_message(
                update.message.from_user.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤: "
                + f'"{error_message}".',
            )
        except Exception as error:
            logger.error(error)
        else:
            await context.bot.send_message(
                update.message.from_user.id,
                "–¢–µ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
            )
    else:
        await context.bot.send_message(
            update.message.from_user.id,
            '–§–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ zip —Ñ–∞–π–ª —Å caption "/create".',
        )


def start_bot() -> None:
    application = ApplicationBuilder().token(os.environ.get("TELEGRAM_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("my_tests", my_tests))
    application.add_handler(CommandHandler("start_test", start_test))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("delete", delete))
    application.add_handler(CommandHandler("create", create))

    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.Regex(r"^/list+"), list_))
    application.add_handler(MessageHandler(filters.Regex(r"^/test_+"), test))
    application.add_handler(MessageHandler(filters.TEXT, other_message))
    application.add_handler(MessageHandler(filters.Document.ALL, get_document_messages))

    application.run_polling()


def main() -> None:
    try:
        start_bot()
    except Exception as error:
        if not issubclass(type(error), BotException) and not issubclass(
            type(error), TimeoutError
        ):
            print_exception(error)
            logger.error(error)
        else:
            main()


if __name__ == "__main__":
    BuilderTest()
    if not os.path.exists(PATH_OF_DATA):
        os.mkdir(PATH_OF_DATA)
    main()
